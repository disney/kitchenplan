#!/usr/bin/env ruby
# Run Kitchenplan.

module Tty extend self
  def blue; bold 34; end
  def white; bold 39; end
  def red; underline 31; end
  def reset; escape 0; end
  def bold n; escape "1;#{n}" end
  def underline n; escape "4;#{n}" end
  def escape n; "\033[#{n}m" if STDOUT.tty? end
end

class Array
  def shell_s
    cp = dup
    first = cp.shift
    cp.map{ |arg| arg.gsub " ", "\\ " }.unshift(first) * " "
  end
end


########################################

abort "Don't run this as root!" if Process.uid == 0
abort <<-EOABORT unless `groups`.split.include? "admin"
This script requires the user #{ENV['USER']} to be an Administrator.
EOABORT

# Put us where we belong, in the root dir of our kitchenplan repo.

options = parse_commandline()

platform = eval("Kitchenplan::Platform::#{Kitchenplan::Platform.constants.first.to_s}.new(debug=#{options[:debug].inspect})")
ohai "Checking platform #{platform.name} version #{platform.version} prerequisites..."
platform.prerequisites()

########################################

# Put us where we belong, in the root dir of our kitchenplan repo.
require 'pathname'
Dir.chdir Pathname.new(__FILE__).realpath + ".."
# load config early as it tells us what platform we're on.
$: << File.join((File.expand_path("../", Pathname.new(__FILE__).realpath)), "/lib")
require "kitchenplan/config"
config = Kitchenplan::Config.new

abort <<-EOABORT unless `groups`.split.include? "admin"
This script requires the user #{ENV['USER']} to be an Administrator.
EOABORT

# Bootstrapping dependencies
sudo "sudo gem install bundler --no-rdoc --no-ri" unless Kernel.system "gem query --name-matches '^bundler$' --installed > /dev/null 2>&1"
normaldo "rm -rf .bundle/config"
normaldo "bundle install --binstubs bin --path .bundle --deployment --local --no-cache #{(options[:debug] ? '--verbose' : '--quiet')}"

# Add local deps to the load path.
require "rubygems"
require "bundler/setup"
require 'json'

# Trying to get some metrics for usage, just comment out if you don't want it.
ohai 'Sending a ping to Google Analytics to count usage'
require 'Gabba'
#Gabba::Gabba.new("UA-46288146-1", "github.com").event("Kitchenplan", "Run", ENV['USER'])
#Gabba::Gabba.new("UA-46288146-1", "github.com").event("Kitchenplan", "Run", "User", ENV['USER'])

# Trying to get some metrics for usage, just comment out if you don't want it.
ohai 'Sending a ping to Google Analytics to count usage'
require 'Gabba'
Gabba::Gabba.new("UA-46288146-1", "github.com").event("Kitchenplan", "Run", ENV['USER'])

# Generate the soloist config
$: << File.join((File.expand_path("../", Pathname.new(__FILE__).realpath)), "/lib")
require 'json'
require "kitchenplan/config"
config = Kitchenplan::Config.new
File.open("kitchenplan-attributes.json", 'w') do |out|
    out.write(JSON.pretty_generate(config.config['attributes']))
end
File.open("solo.rb", 'w') do |out|
    out.write("cookbook_path      [ \"#{Dir.pwd}/cookbooks\" ]")
end

# Installing
normaldo "bin/librarian-chef install --clean #{(options[:debug] ? '--verbose' : '--quiet')}" unless File.exists?("cookbooks")
normaldo "bin/librarian-chef update #{(options[:debug] ? '--verbose' : '')}" if options[:update_cookbooks]

# Run Chef
sudo "bin/chef-solo --log_level #{(options[:debug] ? 'debug' : 'error')} -c solo.rb -j kitchenplan-attributes.json -o #{config.config['recipes'].join(",")}" if options[:chef]

ohai "Chef run complete, your computer should be installed. You can always rerun kitchenplan to adjust your settings."
